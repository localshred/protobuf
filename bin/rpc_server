#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'logger'
require 'protobuf/version'
require 'protobuf/rpc/servers/evented_runner'
require 'protobuf/rpc/servers/socket_runner'
require 'protobuf/rpc/servers/zmq_runner'

# Default options
server = OpenStruct.new({
  :app => nil,
  :env => ENV['RPC_SERVER_ENV'] || 'development',
  :gc_pause_during_request => false,
  :gc_pause_during_serialization => false,
  :host => '127.0.0.1',
  :port => 9595,
  :backlog => 100,
  :threshold => 100,
  :log => File.expand_path('./protobuf.log'),
  :level => ::Logger::INFO,
  :runner => ::Protobuf::Rpc::EventedRunner, 
  :debug => false
})

class ClientServerParse
  def self.parse_client(value)
  end

  def self.parse_server(value)
  end
end

parser = OptionParser.new do |opts|
  opts.banner = "Usage: rpc_server [options] app_file.rb"

  opts.on("-e ENVIRONMENT", "--env=ENVIRONMENT", "Environment to run the server") do |v|
    server.env = ENV['RACK_ENV'] = ENV['RAILS_ENV'] = ENV['APP_ENV'] = v
  end
  
  opts.on("-o HOST", "--host=HOST", "Server host") do |v|
    server.host = v
  end
  
  opts.on("-p PORT", "--port=PORT", Integer, "Server port") do |v|
    server.port = v
  end
  
  opts.on("-l LOG_FILE", "--log=LOG_FILE", "Log file or device") do |v|
    server.log = v
  end
  
  opts.on("-v N", "--level=N", Integer, "Log level to use, 0-5 (see http://www.ruby-doc.org/stdlib/libdoc/logger/rdoc/)") do |v|
    server.level = v.to_i
  end

  opts.on("-b N", "--backlog=N", Integer, "Backlog for listening socket when using Socket Server") do |v|
    server.backlog = v.to_i
  end

  opts.on("-t N", "--threshold=N", Integer, "Multi-threaded Socket Server cleanup threshold") do |v|
    server.threshold = v.to_i
  end

  opts.on("-c", "--client_socket", "Socket Mode for client connections (No EventMachine)") do |v|
    ENV['PB_CLIENT_TYPE'] = "Socket"
  end

  opts.on("-s", "--socket", "Socket Server Mode (No EventMachine)") do |v|
    ENV['PB_SERVER_TYPE'] = "Socket"
    server.runner = ::Protobuf::Rpc::SocketRunner
  end

  opts.on("-z", "--zmq", "ZeroMQ Socket Mode for client and server connections (they must be used together)") do |v|
    ENV['PB_CLIENT_TYPE'] = 'Zmq'
    ENV['PB_SERVER_TYPE'] = 'Zmq'

    server.runner = ::Protobuf::Rpc::ZmqRunner
  end

  opts.on("--[no-]gc-pause-request", "Enable/Disable GC pause during request.") do |v|
    server.gc_pause_during_request = v
  end

  opts.on("--[no-]gc-pause-serialization", "Enable/Disable GC pause during serialization.") do |v|
    server.gc_pause_during_serialization = v
  end
  
  opts.on("-d", "--[no-]debug", "Debug Mode. Override log level to DEBUG.") do |v|
    server.debug = v
    server.level = ::Logger::DEBUG if v === true
  end

  opts.on("--client-type=PB_CLIENT_TYPE", String, "Client Type to use (Socket or Zmq)") do |v|
    ENV['PB_CLIENT_TYPE'] = v
  end

  opts.on("--server-type=PB_SERVER_TYPE", String, "Server Type to use (Socket or Zmq)") do |v|
    ENV['PB_SERVER_TYPE'] = v
  end

  opts.separator ""
  opts.separator "Common options:"

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end

  opts.on_tail("--version", "Show version") do
    puts ::Protobuf::VERSION
    exit
  end
end

parser.parse!

# Used to ensure we set the PB_CLIENT_TYPE and PB_SERVER_TYPE to the same thing
# if one of them is set to Zmq
if(ENV['PB_CLIENT_TYPE'] =~ /zmq/i)
  # make server and client types the same if we're using Zmq
  ENV['PB_SERVER_TYPE'] = ENV['PB_CLIENT_TYPE']
  server.runner = ::Protobuf::Rpc::ZmqRunner
elsif(ENV['PB_SERVER_TYPE'] =~ /zmq/i)
  # make server and client types the same if we're using Zmq
  ENV['PB_CLIENT_TYPE'] = ENV['PB_SERVER_TYPE']
  server.runner = ::Protobuf::Rpc::ZmqRunner
elsif(ENV['PB_SERVER_TYPE'] =~ /socket/i)
  server.runner = ::Protobuf::Rpc::SocketRunner
end

##
# Setup GC settings
# 
::Protobuf::Rpc::GC_PAUSE_REQUEST = server.gc_pause_during_request
# If we pause during request we don't need to pause in serialization
::Protobuf::Rpc::GC_PAUSE_SERIALIZATION = (!server.gc_pause_during_request && server.gc_pause_during_serialization)

# protobuf.rb picks up PB_CLIENT_TYPE and PB_SERVER_TYPE and does something
# useful with them
require 'protobuf'

[:INT, :QUIT, :TERM].each do |sig|
  trap(sig) do
    server.runner.stop
  end
end

begin
  if ARGV.empty?
    puts 'You must specify an app file to use.'
    puts parser.help
    exit
  else
    server.app = ARGV.pop
    raise 'Invalid app file specified (%s).' % server.app unless File.exists?(server.app)
  end

  # Configure the ::Protobuf::Logger
  ::Protobuf::Logger.configure(:file => server.log, :level => server.debug ? ::Logger::DEBUG : server.level)

  # Output the server opts
  ::Protobuf::Logger.debug { 'Debugging options:' }
  ::Protobuf::Logger.debug { server.inspect }
  
  # Set the name of the process
  $0 = 'rpc_server %s:%d %s' % [server.host, server.port, server.app]
  
  # Require the given application file
  require server.app

  server.runner.run(server)
rescue
  msg = 'ERROR: RPC Server failed to start. %s' % $!.inspect
  $stderr.puts(msg, *($!.backtrace))
  ::Protobuf::Logger.error { msg }
  ::Protobuf::Logger.error { $!.backtrace.join("\n") }
  exit 1
end
