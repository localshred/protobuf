# encoding: utf-8
# frozen_string_literal: true

##
# This file is auto-generated. DO NOT EDIT!
#
require 'base64'
require 'set'
require 'protobuf'

module Protobuf
  module Socketrpc
    FULLY_QUALIFIED_NAME = 'protobuf.socketrpc' unless defined?(self::FULLY_QUALIFIED_NAME)

    @descriptors = [] unless instance_variable_defined?(:@descriptors)
    @descriptors << lambda do
      bytes = File.read(__FILE__, mode: 'rb').split(/^__END__$/, 2).last
      ::Google::Protobuf::FileDescriptorProto.decode(Base64.decode64(bytes))
    end

    @descriptor_dependencies = Set.new unless instance_variable_defined?(:@descriptor_dependencies)
    @descriptor_dependencies |= []

    unless respond_to?(:descriptor_set)
      def self.descriptor_set
        ::Google::Protobuf::FileDescriptorSet.new(:file => @descriptors.map(&:call))
      end
    end

    unless respond_to?(:descriptor_dependencies)
      def self.descriptor_dependencies
        @descriptor_dependencies
      end
    end
    ::Protobuf::Optionable.inject(self) { ::Google::Protobuf::FileOptions }

    ##
    # Enum Classes
    #
    class ErrorReason < ::Protobuf::Enum
      FULLY_QUALIFIED_NAME = FULLY_QUALIFIED_NAME + '.ErrorReason'

      define :BAD_REQUEST_DATA, 0
      define :BAD_REQUEST_PROTO, 1
      define :SERVICE_NOT_FOUND, 2
      define :METHOD_NOT_FOUND, 3
      define :RPC_ERROR, 4
      define :RPC_FAILED, 5
      define :INVALID_REQUEST_PROTO, 6
      define :BAD_RESPONSE_PROTO, 7
      define :UNKNOWN_HOST, 8
      define :IO_ERROR, 9
    end


    ##
    # Message Classes
    #
    class Request < ::Protobuf::Message; end
    class Response < ::Protobuf::Message; end
    class Header < ::Protobuf::Message; end


    ##
    # Message Fields
    #
    class Request
      FULLY_QUALIFIED_NAME = FULLY_QUALIFIED_NAME + '.Request'
      required :string, :service_name, 1
      required :string, :method_name, 2
      optional :bytes, :request_proto, 3
      optional :string, :caller, 4
      repeated ::Protobuf::Socketrpc::Header, :headers, 5
    end

    class Response
      FULLY_QUALIFIED_NAME = FULLY_QUALIFIED_NAME + '.Response'
      optional :bytes, :response_proto, 1
      optional :string, :error, 2
      optional :bool, :callback, 3, :default => false
      optional ::Protobuf::Socketrpc::ErrorReason, :error_reason, 4
      optional :string, :server, 5
    end

    class Header
      FULLY_QUALIFIED_NAME = FULLY_QUALIFIED_NAME + '.Header'
      required :string, :key, 1
      optional :string, :value, 2
    end

  end

end


# Raw descriptor bytes below
__END__
CglycGMucHJvdG8SEnByb3RvYnVmLnNvY2tldHJwYyLAAQoHUmVxdWVzdBIh
CgxzZXJ2aWNlX25hbWUYASACKAlSC3NlcnZpY2VOYW1lEh8KC21ldGhvZF9u
YW1lGAIgAigJUgptZXRob2ROYW1lEiMKDXJlcXVlc3RfcHJvdG8YAyABKAxS
DHJlcXVlc3RQcm90bxIWCgZjYWxsZXIYBCABKAlSBmNhbGxlchI0CgdoZWFk
ZXJzGAUgAygLMhoucHJvdG9idWYuc29ja2V0cnBjLkhlYWRlclIHaGVhZGVy
cyLGAQoIUmVzcG9uc2USJQoOcmVzcG9uc2VfcHJvdG8YASABKAxSDXJlc3Bv
bnNlUHJvdG8SFAoFZXJyb3IYAiABKAlSBWVycm9yEiEKCGNhbGxiYWNrGAMg
ASgIOgVmYWxzZVIIY2FsbGJhY2sSQgoMZXJyb3JfcmVhc29uGAQgASgOMh8u
cHJvdG9idWYuc29ja2V0cnBjLkVycm9yUmVhc29uUgtlcnJvclJlYXNvbhIW
CgZzZXJ2ZXIYBSABKAlSBnNlcnZlciIwCgZIZWFkZXISEAoDa2V5GAEgAigJ
UgNrZXkSFAoFdmFsdWUYAiABKAlSBXZhbHVlKtkBCgtFcnJvclJlYXNvbhIU
ChBCQURfUkVRVUVTVF9EQVRBEAASFQoRQkFEX1JFUVVFU1RfUFJPVE8QARIV
ChFTRVJWSUNFX05PVF9GT1VORBACEhQKEE1FVEhPRF9OT1RfRk9VTkQQAxIN
CglSUENfRVJST1IQBBIOCgpSUENfRkFJTEVEEAUSGQoVSU5WQUxJRF9SRVFV
RVNUX1BST1RPEAYSFgoSQkFEX1JFU1BPTlNFX1BST1RPEAcSEAoMVU5LTk9X
Tl9IT1NUEAgSDAoISU9fRVJST1IQCUqdGwoGEgQYAEQBCoIJCgECEgMYABsy
rwggQ29weXJpZ2h0IChjKSAyMDA5IFNoYXJkdWwgRGVvCgogUGVybWlzc2lv
biBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBw
ZXJzb24gb2J0YWluaW5nIGEgY29weQogb2YgdGhpcyBzb2Z0d2FyZSBhbmQg
YXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJl
IiksIHRvIGRlYWwKIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0
aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMK
IHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJp
YnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwKIGNvcGllcyBvZiB0aGUg
U29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBT
b2Z0d2FyZSBpcwogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRo
ZSBmb2xsb3dpbmcgY29uZGl0aW9uczoKCiBUaGUgYWJvdmUgY29weXJpZ2h0
IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBp
bmNsdWRlZCBpbgogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9u
cyBvZiB0aGUgU29mdHdhcmUuCgogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVE
ICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJF
U1MgT1IKIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8g
VEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLAogRklUTkVTUyBG
T1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4g
SU4gTk8gRVZFTlQgU0hBTEwgVEhFCiBBVVRIT1JTIE9SIENPUFlSSUdIVCBI
T0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9U
SEVSCiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRS
QUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLAogT1VUIE9G
IE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVT
RSBPUiBPVEhFUiBERUFMSU5HUyBJTgogVEhFIFNPRlRXQVJFLgoyRiBBdXRo
b3JzOiBTaGFyZHVsIERlbywgQkogTmVpbHNlbgoKIFByb3RvYnVmcyBuZWVk
ZWQgZm9yIHNvY2tldCBycGNzLgoKCgoCBAASBBoAIQEKCgoDBAABEgMaCA8K
MgoEBAACABIDHAIjIiUgRnVsbHktIHF1YWxpZmllZCBTZXJ2aWNlIGNsYXNz
IG5hbWUKCgwKBQQAAgAEEgMcAgoKDAoFBAACAAUSAxwLEQoMCgUEAAIAARID
HBIeCgwKBQQAAgADEgMcISIKJwoEBAACARIDHQIiIhogU2VydmljZSBtZXRo
b2QgdG8gaW52b2tlCgoMCgUEAAIBBBIDHQIKCgwKBQQAAgEFEgMdCxEKDAoF
BAACAQESAx0SHQoMCgUEAAIBAxIDHSAhCicKBAQAAgISAx4CIyIaIFNlcmlh
bGl6ZWQgcmVxdWVzdCBieXRlcwoKDAoFBAACAgQSAx4CCgoMCgUEAAICBRID
HgsQCgwKBQQAAgIBEgMeER4KDAoFBAACAgMSAx4hIgoqCgQEAAIDEgMfAh0i
HSBDYWxsaW5nIGhvc3RuYW1lIG9yIGFkZHJlc3MKCgwKBQQAAgMEEgMfAgoK
DAoFBAACAwUSAx8LEQoMCgUEAAIDARIDHxIYCgwKBQQAAgMDEgMfGxwKLgoE
BAACBBIDIAIeIiEgR2VuZXJhbCBwdXJwb3NlIHJlcXVlc3QgaGVhZGVycwoK
DAoFBAACBAQSAyACCgoMCgUEAAIEBhIDIAsRCgwKBQQAAgQBEgMgEhkKDAoF
BAACBAMSAyAcHQoKCgIEARIEIwAqAQoKCgMEAQESAyMIEAoiCgQEAQIAEgMl
AiQiFSBTZXJpYWxpemVkIHJlc3BvbnNlCgoMCgUEAQIABBIDJQIKCgwKBQQB
AgAFEgMlCxAKDAoFBAECAAESAyURHwoMCgUEAQIAAxIDJSIjCiQKBAQBAgES
AyYCHCIXIEVycm9yIG1lc3NhZ2UsIGlmIGFueQoKDAoFBAECAQQSAyYCCgoM
CgUEAQIBBRIDJgsRCgwKBQQBAgEBEgMmEhcKDAoFBAECAQMSAyYaGwo/CgQE
AQICEgMnAi8iMiBXYXMgY2FsbGJhY2sgaW52b2tlZCAobm90IHN1cmUgd2hh
dCB0aGlzIGlzIGZvcikKCgwKBQQBAgIEEgMnAgoKDAoFBAECAgUSAycLDwoM
CgUEAQICARIDJxAYCgwKBQQBAgIDEgMnGxwKDAoFBAECAggSAycdLgoMCgUE
AQICBxIDJygtChsKBAQBAgMSAygCKCIOIEVycm9yIFJlYXNvbgoKDAoFBAEC
AwQSAygCCgoMCgUEAQIDBhIDKAsWCgwKBQQBAgMBEgMoFyMKDAoFBAECAwMS
AygmJwopCgQEAQIEEgMpAh0iHCBTZXJ2ZXIgaG9zdG5hbWUgb3IgYWRkcmVz
cwoKDAoFBAECBAQSAykCCgoMCgUEAQIEBRIDKQsRCgwKBQQBAgQBEgMpEhgK
DAoFBAECBAMSAykbHAoKCgIEAhIELAAvAQoKCgMEAgESAywIDgoLCgQEAgIA
EgMtAhoKDAoFBAICAAQSAy0CCgoMCgUEAgIABRIDLQsRCgwKBQQCAgABEgMt
EhUKDAoFBAICAAMSAy0YGQoLCgQEAgIBEgMuAhwKDAoFBAICAQQSAy4CCgoM
CgUEAgIBBRIDLgsRCgwKBQQCAgEBEgMuEhcKDAoFBAICAQMSAy4aGwraAQoC
BQASBDUARAEazQEgUG9zc2libGUgZXJyb3IgcmVhc29ucwogVGhlIHNlcnZl
ci1zaWRlIGVycm9ycyBhcmUgcmV0dXJuZWQgaW4gdGhlIHJlc3BvbnNlIGZy
b20gdGhlIHNlcnZlci4KIFRoZSBjbGllbnQtc2lkZSBlcnJvcnMgYXJlIHJl
dHVybmVkIGJ5IHRoZSBjbGllbnQtc2lkZSBjb2RlIHdoZW4gaXQgZG9lc24n
dAogaGF2ZSBhIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZlci4KCgoKAwUAARID
NQUQCkUKBAUAAgASAzgCFxoUIFNlcnZlci1zaWRlIGVycm9ycwoiIiBTZXJ2
ZXIgcmVjZWl2ZWQgYmFkIHJlcXVlc3QgZGF0YQoKDAoFBQACAAESAzgCEgoM
CgUFAAIAAhIDOBUWCjAKBAUAAgESAzkCGCIjIFNlcnZlciByZWNlaXZlZCBi
YWQgcmVxdWVzdCBwcm90bwoKDAoFBQACAQESAzkCEwoMCgUFAAIBAhIDORYX
CioKBAUAAgISAzoCGCIdIFNlcnZpY2Ugbm90IGZvdW5kIG9uIHNlcnZlcgoK
DAoFBQACAgESAzoCEwoMCgUFAAICAhIDOhYXCikKBAUAAgMSAzsCFyIcIE1l
dGhvZCBub3QgZm91bmQgb24gc2VydmVyCgoMCgUFAAIDARIDOwISCgwKBQUA
AgMCEgM7FRYKLAoEBQACBBIDPAIQIh8gUnBjIHRocmV3IGV4Y2VwdGlvbiBv
biBzZXJ2ZXIKCgwKBQUAAgQBEgM8AgsKDAoFBQACBAISAzwODwojCgQFAAIF
EgM9AhEiFiBScGMgZmFpbGVkIG9uIHNlcnZlcgoKDAoFBQACBQESAz0CDAoM
CgUFAAIFAhIDPQ8QCnsKBAUAAgYSA0ACHBpBIENsaWVudC1zaWRlIGVycm9y
cyAodGhlc2UgYXJlIHJldHVybmVkIGJ5IHRoZSBjbGllbnQtc2lkZSBjb2Rl
KQoiKyBScGMgd2FzIGNhbGxlZCB3aXRoIGludmFsaWQgcmVxdWVzdCBwcm90
bwoKDAoFBQACBgESA0ACFwoMCgUFAAIGAhIDQBobCjMKBAUAAgcSA0ECGSIm
IFNlcnZlciByZXR1cm5lZCBhIGJhZCByZXNwb25zZSBwcm90bwoKDAoFBQAC
BwESA0ECFAoMCgUFAAIHAhIDQRcYCisKBAUAAggSA0ICEyIeIENvdWxkIG5v
dCBmaW5kIHN1cHBsaWVkIGhvc3QKCgwKBQUAAggBEgNCAg4KDAoFBQACCAIS
A0IREgo4CgQFAAIJEgNDAg8iKyBJL08gZXJyb3Igd2hpbGUgY29tbXVuaWNh
dGluZyB3aXRoIHNlcnZlcgoKDAoFBQACCQESA0MCCgoMCgUFAAIJAhIDQw0O
