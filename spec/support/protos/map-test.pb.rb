# encoding: utf-8
# frozen_string_literal: true

##
# This file is auto-generated. DO NOT EDIT!
#
require 'base64'
require 'set'
require 'protobuf'

module Foo
  FULLY_QUALIFIED_NAME = 'foo' unless defined?(self::FULLY_QUALIFIED_NAME)

  @descriptors = [] unless instance_variable_defined?(:@descriptors)
  @descriptors << lambda do
    bytes = File.read(__FILE__, mode: 'rb').split(/^__END__$/, 2).last
    ::Google::Protobuf::FileDescriptorProto.decode(Base64.decode64(bytes))
  end

  @descriptor_dependencies = Set.new unless instance_variable_defined?(:@descriptor_dependencies)
  @descriptor_dependencies |= []

  unless respond_to?(:descriptor_set)
    def self.descriptor_set
      ::Google::Protobuf::FileDescriptorSet.new(:file => @descriptors.map(&:call))
    end
  end

  unless respond_to?(:descriptor_dependencies)
    def self.descriptor_dependencies
      @descriptor_dependencies
    end
  end
  ::Protobuf::Optionable.inject(self) { ::Google::Protobuf::FileOptions }

  ##
  # Enum Classes
  #
  class Frobnitz < ::Protobuf::Enum
    FULLY_QUALIFIED_NAME = FULLY_QUALIFIED_NAME + '.Frobnitz'

    define :FROB, 0
    define :NITZ, 1
  end


  ##
  # Message Classes
  #
  class Baz < ::Protobuf::Message
    class DoesNotLookLikeMapEntry < ::Protobuf::Message; end

  end

  class Bar < ::Protobuf::Message
  end



  ##
  # Message Fields
  #
  class Baz
    FULLY_QUALIFIED_NAME = FULLY_QUALIFIED_NAME + '.Baz'
    class DoesNotLookLikeMapEntry
      FULLY_QUALIFIED_NAME = FULLY_QUALIFIED_NAME + '.DoesNotLookLikeMapEntry'
      optional :string, :key, 1
      optional :string, :value, 2
    end

    map :string, :string, :looks_like_map, 1
    repeated ::Foo::Baz::DoesNotLookLikeMapEntry, :does_not_look_like_map, 2
  end

  class Bar
    FULLY_QUALIFIED_NAME = FULLY_QUALIFIED_NAME + '.Bar'
    map :sint32, ::Foo::Baz, :sint32_to_baz, 1
    map :sint64, ::Foo::Baz, :sint64_to_baz, 2
    map :int32, ::Foo::Baz, :int32_to_baz, 3
    map :int64, ::Foo::Baz, :int64_to_baz, 4
    map :uint32, ::Foo::Baz, :uint32_to_baz, 5
    map :uint64, ::Foo::Baz, :uint64_to_baz, 6
    map :string, ::Foo::Baz, :string_to_baz, 7
    map :sint32, ::Foo::Frobnitz, :sint32_to_frobnitz, 8
    map :sint64, ::Foo::Frobnitz, :sint64_to_frobnitz, 9
    map :int32, ::Foo::Frobnitz, :int32_to_frobnitz, 10
    map :int64, ::Foo::Frobnitz, :int64_to_frobnitz, 11
    map :uint32, ::Foo::Frobnitz, :uint32_to_frobnitz, 12
    map :uint64, ::Foo::Frobnitz, :uint64_to_frobnitz, 13
    map :string, ::Foo::Frobnitz, :string_to_frobnitz, 14
    map :sint32, :string, :sint32_to_string, 15
    map :sint64, :string, :sint64_to_string, 16
    map :int32, :string, :int32_to_string, 17
    map :int64, :string, :int64_to_string, 18
    map :uint32, :string, :uint32_to_string, 19
    map :uint64, :string, :uint64_to_string, 20
    map :string, :string, :string_to_string, 21
    map :sint32, :float, :sint32_to_float, 22
    map :sint64, :float, :sint64_to_float, 23
    map :int32, :float, :int32_to_float, 24
    map :int64, :float, :int64_to_float, 25
    map :uint32, :float, :uint32_to_float, 26
    map :uint64, :float, :uint64_to_float, 27
    map :string, :float, :string_to_float, 28
    map :sint32, :double, :sint32_to_double, 29
    map :sint64, :double, :sint64_to_double, 30
    map :int32, :double, :int32_to_double, 31
    map :int64, :double, :int64_to_double, 32
    map :uint32, :double, :uint32_to_double, 33
    map :uint64, :double, :uint64_to_double, 34
    map :string, :double, :string_to_double, 35
  end

end


# Raw descriptor bytes below
__END__
ChVwcm90b3MvbWFwLXRlc3QucHJvdG8SA2ZvbyKhAgoDQmF6EkAKDmxvb2tz
X2xpa2VfbWFwGAEgAygLMhouZm9vLkJhei5Mb29rc0xpa2VNYXBFbnRyeVIM
bG9va3NMaWtlTWFwElQKFmRvZXNfbm90X2xvb2tfbGlrZV9tYXAYAiADKAsy
IC5mb28uQmF6LkRvZXNOb3RMb29rTGlrZU1hcEVudHJ5UhJkb2VzTm90TG9v
a0xpa2VNYXAaPwoRTG9va3NMaWtlTWFwRW50cnkSEAoDa2V5GAEgASgJUgNr
ZXkSFAoFdmFsdWUYAiABKAlSBXZhbHVlOgI4ARpBChdEb2VzTm90TG9va0xp
a2VNYXBFbnRyeRIQCgNrZXkYASABKAlSA2tleRIUCgV2YWx1ZRgCIAEoCVIF
dmFsdWUi1SYKA0JhchI9Cg1zaW50MzJfdG9fYmF6GAEgAygLMhkuZm9vLkJh
ci5TaW50MzJUb0JhekVudHJ5UgtzaW50MzJUb0JhehI9Cg1zaW50NjRfdG9f
YmF6GAIgAygLMhkuZm9vLkJhci5TaW50NjRUb0JhekVudHJ5UgtzaW50NjRU
b0JhehI6CgxpbnQzMl90b19iYXoYAyADKAsyGC5mb28uQmFyLkludDMyVG9C
YXpFbnRyeVIKaW50MzJUb0JhehI6CgxpbnQ2NF90b19iYXoYBCADKAsyGC5m
b28uQmFyLkludDY0VG9CYXpFbnRyeVIKaW50NjRUb0JhehI9Cg11aW50MzJf
dG9fYmF6GAUgAygLMhkuZm9vLkJhci5VaW50MzJUb0JhekVudHJ5Ugt1aW50
MzJUb0JhehI9Cg11aW50NjRfdG9fYmF6GAYgAygLMhkuZm9vLkJhci5VaW50
NjRUb0JhekVudHJ5Ugt1aW50NjRUb0JhehI9Cg1zdHJpbmdfdG9fYmF6GAcg
AygLMhkuZm9vLkJhci5TdHJpbmdUb0JhekVudHJ5UgtzdHJpbmdUb0JhehJM
ChJzaW50MzJfdG9fZnJvYm5pdHoYCCADKAsyHi5mb28uQmFyLlNpbnQzMlRv
RnJvYm5pdHpFbnRyeVIQc2ludDMyVG9Gcm9ibml0ehJMChJzaW50NjRfdG9f
ZnJvYm5pdHoYCSADKAsyHi5mb28uQmFyLlNpbnQ2NFRvRnJvYm5pdHpFbnRy
eVIQc2ludDY0VG9Gcm9ibml0ehJJChFpbnQzMl90b19mcm9ibml0ehgKIAMo
CzIdLmZvby5CYXIuSW50MzJUb0Zyb2JuaXR6RW50cnlSD2ludDMyVG9Gcm9i
bml0ehJJChFpbnQ2NF90b19mcm9ibml0ehgLIAMoCzIdLmZvby5CYXIuSW50
NjRUb0Zyb2JuaXR6RW50cnlSD2ludDY0VG9Gcm9ibml0ehJMChJ1aW50MzJf
dG9fZnJvYm5pdHoYDCADKAsyHi5mb28uQmFyLlVpbnQzMlRvRnJvYm5pdHpF
bnRyeVIQdWludDMyVG9Gcm9ibml0ehJMChJ1aW50NjRfdG9fZnJvYm5pdHoY
DSADKAsyHi5mb28uQmFyLlVpbnQ2NFRvRnJvYm5pdHpFbnRyeVIQdWludDY0
VG9Gcm9ibml0ehJMChJzdHJpbmdfdG9fZnJvYm5pdHoYDiADKAsyHi5mb28u
QmFyLlN0cmluZ1RvRnJvYm5pdHpFbnRyeVIQc3RyaW5nVG9Gcm9ibml0ehJG
ChBzaW50MzJfdG9fc3RyaW5nGA8gAygLMhwuZm9vLkJhci5TaW50MzJUb1N0
cmluZ0VudHJ5Ug5zaW50MzJUb1N0cmluZxJGChBzaW50NjRfdG9fc3RyaW5n
GBAgAygLMhwuZm9vLkJhci5TaW50NjRUb1N0cmluZ0VudHJ5Ug5zaW50NjRU
b1N0cmluZxJDCg9pbnQzMl90b19zdHJpbmcYESADKAsyGy5mb28uQmFyLklu
dDMyVG9TdHJpbmdFbnRyeVINaW50MzJUb1N0cmluZxJDCg9pbnQ2NF90b19z
dHJpbmcYEiADKAsyGy5mb28uQmFyLkludDY0VG9TdHJpbmdFbnRyeVINaW50
NjRUb1N0cmluZxJGChB1aW50MzJfdG9fc3RyaW5nGBMgAygLMhwuZm9vLkJh
ci5VaW50MzJUb1N0cmluZ0VudHJ5Ug51aW50MzJUb1N0cmluZxJGChB1aW50
NjRfdG9fc3RyaW5nGBQgAygLMhwuZm9vLkJhci5VaW50NjRUb1N0cmluZ0Vu
dHJ5Ug51aW50NjRUb1N0cmluZxJGChBzdHJpbmdfdG9fc3RyaW5nGBUgAygL
MhwuZm9vLkJhci5TdHJpbmdUb1N0cmluZ0VudHJ5Ug5zdHJpbmdUb1N0cmlu
ZxJDCg9zaW50MzJfdG9fZmxvYXQYFiADKAsyGy5mb28uQmFyLlNpbnQzMlRv
RmxvYXRFbnRyeVINc2ludDMyVG9GbG9hdBJDCg9zaW50NjRfdG9fZmxvYXQY
FyADKAsyGy5mb28uQmFyLlNpbnQ2NFRvRmxvYXRFbnRyeVINc2ludDY0VG9G
bG9hdBJACg5pbnQzMl90b19mbG9hdBgYIAMoCzIaLmZvby5CYXIuSW50MzJU
b0Zsb2F0RW50cnlSDGludDMyVG9GbG9hdBJACg5pbnQ2NF90b19mbG9hdBgZ
IAMoCzIaLmZvby5CYXIuSW50NjRUb0Zsb2F0RW50cnlSDGludDY0VG9GbG9h
dBJDCg91aW50MzJfdG9fZmxvYXQYGiADKAsyGy5mb28uQmFyLlVpbnQzMlRv
RmxvYXRFbnRyeVINdWludDMyVG9GbG9hdBJDCg91aW50NjRfdG9fZmxvYXQY
GyADKAsyGy5mb28uQmFyLlVpbnQ2NFRvRmxvYXRFbnRyeVINdWludDY0VG9G
bG9hdBJDCg9zdHJpbmdfdG9fZmxvYXQYHCADKAsyGy5mb28uQmFyLlN0cmlu
Z1RvRmxvYXRFbnRyeVINc3RyaW5nVG9GbG9hdBJGChBzaW50MzJfdG9fZG91
YmxlGB0gAygLMhwuZm9vLkJhci5TaW50MzJUb0RvdWJsZUVudHJ5Ug5zaW50
MzJUb0RvdWJsZRJGChBzaW50NjRfdG9fZG91YmxlGB4gAygLMhwuZm9vLkJh
ci5TaW50NjRUb0RvdWJsZUVudHJ5Ug5zaW50NjRUb0RvdWJsZRJDCg9pbnQz
Ml90b19kb3VibGUYHyADKAsyGy5mb28uQmFyLkludDMyVG9Eb3VibGVFbnRy
eVINaW50MzJUb0RvdWJsZRJDCg9pbnQ2NF90b19kb3VibGUYICADKAsyGy5m
b28uQmFyLkludDY0VG9Eb3VibGVFbnRyeVINaW50NjRUb0RvdWJsZRJGChB1
aW50MzJfdG9fZG91YmxlGCEgAygLMhwuZm9vLkJhci5VaW50MzJUb0RvdWJs
ZUVudHJ5Ug51aW50MzJUb0RvdWJsZRJGChB1aW50NjRfdG9fZG91YmxlGCIg
AygLMhwuZm9vLkJhci5VaW50NjRUb0RvdWJsZUVudHJ5Ug51aW50NjRUb0Rv
dWJsZRJGChBzdHJpbmdfdG9fZG91YmxlGCMgAygLMhwuZm9vLkJhci5TdHJp
bmdUb0RvdWJsZUVudHJ5Ug5zdHJpbmdUb0RvdWJsZRpIChBTaW50MzJUb0Jh
ekVudHJ5EhAKA2tleRgBIAEoEVIDa2V5Eh4KBXZhbHVlGAIgASgLMgguZm9v
LkJhelIFdmFsdWU6AjgBGkgKEFNpbnQ2NFRvQmF6RW50cnkSEAoDa2V5GAEg
ASgSUgNrZXkSHgoFdmFsdWUYAiABKAsyCC5mb28uQmF6UgV2YWx1ZToCOAEa
RwoPSW50MzJUb0JhekVudHJ5EhAKA2tleRgBIAEoBVIDa2V5Eh4KBXZhbHVl
GAIgASgLMgguZm9vLkJhelIFdmFsdWU6AjgBGkcKD0ludDY0VG9CYXpFbnRy
eRIQCgNrZXkYASABKANSA2tleRIeCgV2YWx1ZRgCIAEoCzIILmZvby5CYXpS
BXZhbHVlOgI4ARpIChBVaW50MzJUb0JhekVudHJ5EhAKA2tleRgBIAEoDVID
a2V5Eh4KBXZhbHVlGAIgASgLMgguZm9vLkJhelIFdmFsdWU6AjgBGkgKEFVp
bnQ2NFRvQmF6RW50cnkSEAoDa2V5GAEgASgEUgNrZXkSHgoFdmFsdWUYAiAB
KAsyCC5mb28uQmF6UgV2YWx1ZToCOAEaSAoQU3RyaW5nVG9CYXpFbnRyeRIQ
CgNrZXkYASABKAlSA2tleRIeCgV2YWx1ZRgCIAEoCzIILmZvby5CYXpSBXZh
bHVlOgI4ARpSChVTaW50MzJUb0Zyb2JuaXR6RW50cnkSEAoDa2V5GAEgASgR
UgNrZXkSIwoFdmFsdWUYAiABKA4yDS5mb28uRnJvYm5pdHpSBXZhbHVlOgI4
ARpSChVTaW50NjRUb0Zyb2JuaXR6RW50cnkSEAoDa2V5GAEgASgSUgNrZXkS
IwoFdmFsdWUYAiABKA4yDS5mb28uRnJvYm5pdHpSBXZhbHVlOgI4ARpRChRJ
bnQzMlRvRnJvYm5pdHpFbnRyeRIQCgNrZXkYASABKAVSA2tleRIjCgV2YWx1
ZRgCIAEoDjINLmZvby5Gcm9ibml0elIFdmFsdWU6AjgBGlEKFEludDY0VG9G
cm9ibml0ekVudHJ5EhAKA2tleRgBIAEoA1IDa2V5EiMKBXZhbHVlGAIgASgO
Mg0uZm9vLkZyb2JuaXR6UgV2YWx1ZToCOAEaUgoVVWludDMyVG9Gcm9ibml0
ekVudHJ5EhAKA2tleRgBIAEoDVIDa2V5EiMKBXZhbHVlGAIgASgOMg0uZm9v
LkZyb2JuaXR6UgV2YWx1ZToCOAEaUgoVVWludDY0VG9Gcm9ibml0ekVudHJ5
EhAKA2tleRgBIAEoBFIDa2V5EiMKBXZhbHVlGAIgASgOMg0uZm9vLkZyb2Ju
aXR6UgV2YWx1ZToCOAEaUgoVU3RyaW5nVG9Gcm9ibml0ekVudHJ5EhAKA2tl
eRgBIAEoCVIDa2V5EiMKBXZhbHVlGAIgASgOMg0uZm9vLkZyb2JuaXR6UgV2
YWx1ZToCOAEaQQoTU2ludDMyVG9TdHJpbmdFbnRyeRIQCgNrZXkYASABKBFS
A2tleRIUCgV2YWx1ZRgCIAEoCVIFdmFsdWU6AjgBGkEKE1NpbnQ2NFRvU3Ry
aW5nRW50cnkSEAoDa2V5GAEgASgSUgNrZXkSFAoFdmFsdWUYAiABKAlSBXZh
bHVlOgI4ARpAChJJbnQzMlRvU3RyaW5nRW50cnkSEAoDa2V5GAEgASgFUgNr
ZXkSFAoFdmFsdWUYAiABKAlSBXZhbHVlOgI4ARpAChJJbnQ2NFRvU3RyaW5n
RW50cnkSEAoDa2V5GAEgASgDUgNrZXkSFAoFdmFsdWUYAiABKAlSBXZhbHVl
OgI4ARpBChNVaW50MzJUb1N0cmluZ0VudHJ5EhAKA2tleRgBIAEoDVIDa2V5
EhQKBXZhbHVlGAIgASgJUgV2YWx1ZToCOAEaQQoTVWludDY0VG9TdHJpbmdF
bnRyeRIQCgNrZXkYASABKARSA2tleRIUCgV2YWx1ZRgCIAEoCVIFdmFsdWU6
AjgBGkEKE1N0cmluZ1RvU3RyaW5nRW50cnkSEAoDa2V5GAEgASgJUgNrZXkS
FAoFdmFsdWUYAiABKAlSBXZhbHVlOgI4ARpAChJTaW50MzJUb0Zsb2F0RW50
cnkSEAoDa2V5GAEgASgRUgNrZXkSFAoFdmFsdWUYAiABKAJSBXZhbHVlOgI4
ARpAChJTaW50NjRUb0Zsb2F0RW50cnkSEAoDa2V5GAEgASgSUgNrZXkSFAoF
dmFsdWUYAiABKAJSBXZhbHVlOgI4ARo/ChFJbnQzMlRvRmxvYXRFbnRyeRIQ
CgNrZXkYASABKAVSA2tleRIUCgV2YWx1ZRgCIAEoAlIFdmFsdWU6AjgBGj8K
EUludDY0VG9GbG9hdEVudHJ5EhAKA2tleRgBIAEoA1IDa2V5EhQKBXZhbHVl
GAIgASgCUgV2YWx1ZToCOAEaQAoSVWludDMyVG9GbG9hdEVudHJ5EhAKA2tl
eRgBIAEoDVIDa2V5EhQKBXZhbHVlGAIgASgCUgV2YWx1ZToCOAEaQAoSVWlu
dDY0VG9GbG9hdEVudHJ5EhAKA2tleRgBIAEoBFIDa2V5EhQKBXZhbHVlGAIg
ASgCUgV2YWx1ZToCOAEaQAoSU3RyaW5nVG9GbG9hdEVudHJ5EhAKA2tleRgB
IAEoCVIDa2V5EhQKBXZhbHVlGAIgASgCUgV2YWx1ZToCOAEaQQoTU2ludDMy
VG9Eb3VibGVFbnRyeRIQCgNrZXkYASABKBFSA2tleRIUCgV2YWx1ZRgCIAEo
AVIFdmFsdWU6AjgBGkEKE1NpbnQ2NFRvRG91YmxlRW50cnkSEAoDa2V5GAEg
ASgSUgNrZXkSFAoFdmFsdWUYAiABKAFSBXZhbHVlOgI4ARpAChJJbnQzMlRv
RG91YmxlRW50cnkSEAoDa2V5GAEgASgFUgNrZXkSFAoFdmFsdWUYAiABKAFS
BXZhbHVlOgI4ARpAChJJbnQ2NFRvRG91YmxlRW50cnkSEAoDa2V5GAEgASgD
UgNrZXkSFAoFdmFsdWUYAiABKAFSBXZhbHVlOgI4ARpBChNVaW50MzJUb0Rv
dWJsZUVudHJ5EhAKA2tleRgBIAEoDVIDa2V5EhQKBXZhbHVlGAIgASgBUgV2
YWx1ZToCOAEaQQoTVWludDY0VG9Eb3VibGVFbnRyeRIQCgNrZXkYASABKARS
A2tleRIUCgV2YWx1ZRgCIAEoAVIFdmFsdWU6AjgBGkEKE1N0cmluZ1RvRG91
YmxlRW50cnkSEAoDa2V5GAEgASgJUgNrZXkSFAoFdmFsdWUYAiABKAFSBXZh
bHVlOgI4ASoeCghGcm9ibml0ehIICgRGUk9CEAASCAoETklUWhABSt0ZCgYS
BAMAQwEKgQEKAQwSAwMAEjJ3IFVzZSBwcm90b2MgdjMuMC4wIHRvIGNvbXBp
bGUgdGhpcyBmaWxlIGludG8gbWFwLXRlc3QuYmluOgogICBwcm90b2MgLS1k
ZXNjcmlwdG9yX3NldF9vdXQ9bWFwLXRlc3QuYmluIG1hcC10ZXN0LnByb3Rv
IAoKCAoBAhIDBQAMCgoKAgUAEgQHAAoBCgoKAwUAARIDBwUNCgsKBAUAAgAS
AwgCCwoMCgUFAAIAARIDCAIGCgwKBQUAAgACEgMICQoKCwoEBQACARIDCQIL
CgwKBQUAAgEBEgMJAgYKDAoFBQACAQISAwkJCgoKCgIEABIEDAAZAQoKCgME
AAESAwwICwoMCgQEAAMAEgQNAhEDCgwKBQQAAwABEgMNChsKDAoFBAADAAcS
Aw4EHAoNCgYEAAMABwcSAw4EHAoNCgYEAAMAAgASAw8EHAoOCgcEAAMAAgAE
EgMPBAwKDgoHBAADAAIABRIDDw0TCg4KBwQAAwACAAESAw8UFwoOCgcEAAMA
AgADEgMPGhsKDQoGBAADAAIBEgMQBB4KDgoHBAADAAIBBBIDEAQMCg4KBwQA
AwACAQUSAxANEwoOCgcEAAMAAgEBEgMQFBkKDgoHBAADAAIBAxIDEBwdCgsK
BAQAAgASAxICMAoMCgUEAAIABBIDEgIKCgwKBQQAAgAGEgMSCxwKDAoFBAAC
AAESAxIdKwoMCgUEAAIAAxIDEi4vCgwKBAQAAwESBBQCFwMKDAoFBAADAQES
AxQKIQoNCgYEAAMBAgASAxUEHAoOCgcEAAMBAgAEEgMVBAwKDgoHBAADAQIA
BRIDFQ0TCg4KBwQAAwECAAESAxUUFwoOCgcEAAMBAgADEgMVGhsKDQoGBAAD
AQIBEgMWBB4KDgoHBAADAQIBBBIDFgQMCg4KBwQAAwECAQUSAxYNEwoOCgcE
AAMBAgEBEgMWFBkKDgoHBAADAQIBAxIDFhwdCgsKBAQAAgESAxgCPgoMCgUE
AAIBBBIDGAIKCgwKBQQAAgEGEgMYCyIKDAoFBAACAQESAxgjOQoMCgUEAAIB
AxIDGDw9CgoKAgQBEgQbAEMBCgoKAwQBARIDGwgLCgsKBAQBAgASAxwCJQoN
CgUEAQIABBIEHAIbDQoMCgUEAQIABhIDHAISCgwKBQQBAgABEgMcEyAKDAoF
BAECAAMSAxwjJAoLCgQEAQIBEgMdAiUKDQoFBAECAQQSBB0CHCUKDAoFBAEC
AQYSAx0CEgoMCgUEAQIBARIDHRMgCgwKBQQBAgEDEgMdIyQKCwoEBAECAhID
HgIjCg0KBQQBAgIEEgQeAh0lCgwKBQQBAgIGEgMeAhEKDAoFBAECAgESAx4S
HgoMCgUEAQICAxIDHiEiCgsKBAQBAgMSAx8CIwoNCgUEAQIDBBIEHwIeIwoM
CgUEAQIDBhIDHwIRCgwKBQQBAgMBEgMfEh4KDAoFBAECAwMSAx8hIgoLCgQE
AQIEEgMgAiUKDQoFBAECBAQSBCACHyMKDAoFBAECBAYSAyACEgoMCgUEAQIE
ARIDIBMgCgwKBQQBAgQDEgMgIyQKCwoEBAECBRIDIQIlCg0KBQQBAgUEEgQh
AiAlCgwKBQQBAgUGEgMhAhIKDAoFBAECBQESAyETIAoMCgUEAQIFAxIDISMk
CgsKBAQBAgYSAyICJQoNCgUEAQIGBBIEIgIhJQoMCgUEAQIGBhIDIgISCgwK
BQQBAgYBEgMiEyAKDAoFBAECBgMSAyIjJAoLCgQEAQIHEgMkAi8KDQoFBAEC
BwQSBCQCIiUKDAoFBAECBwYSAyQCFwoMCgUEAQIHARIDJBgqCgwKBQQBAgcD
EgMkLS4KCwoEBAECCBIDJQIvCg0KBQQBAggEEgQlAiQvCgwKBQQBAggGEgMl
AhcKDAoFBAECCAESAyUYKgoMCgUEAQIIAxIDJS0uCgsKBAQBAgkSAyYCLgoN
CgUEAQIJBBIEJgIlLwoMCgUEAQIJBhIDJgIWCgwKBQQBAgkBEgMmFygKDAoF
BAECCQMSAyYrLQoLCgQEAQIKEgMnAi4KDQoFBAECCgQSBCcCJi4KDAoFBAEC
CgYSAycCFgoMCgUEAQIKARIDJxcoCgwKBQQBAgoDEgMnKy0KCwoEBAECCxID
KAIwCg0KBQQBAgsEEgQoAicuCgwKBQQBAgsGEgMoAhcKDAoFBAECCwESAygY
KgoMCgUEAQILAxIDKC0vCgsKBAQBAgwSAykCMAoNCgUEAQIMBBIEKQIoMAoM
CgUEAQIMBhIDKQIXCgwKBQQBAgwBEgMpGCoKDAoFBAECDAMSAyktLwoLCgQE
AQINEgMqAjAKDQoFBAECDQQSBCoCKTAKDAoFBAECDQYSAyoCFwoMCgUEAQIN
ARIDKhgqCgwKBQQBAg0DEgMqLS8KCwoEBAECDhIDLAIsCg0KBQQBAg4EEgQs
AiowCgwKBQQBAg4GEgMsAhUKDAoFBAECDgESAywWJgoMCgUEAQIOAxIDLCkr
CgsKBAQBAg8SAy0CLAoNCgUEAQIPBBIELQIsLAoMCgUEAQIPBhIDLQIVCgwK
BQQBAg8BEgMtFiYKDAoFBAECDwMSAy0pKwoLCgQEAQIQEgMuAioKDQoFBAEC
EAQSBC4CLSwKDAoFBAECEAYSAy4CFAoMCgUEAQIQARIDLhUkCgwKBQQBAhAD
EgMuJykKCwoEBAECERIDLwIqCg0KBQQBAhEEEgQvAi4qCgwKBQQBAhEGEgMv
AhQKDAoFBAECEQESAy8VJAoMCgUEAQIRAxIDLycpCgsKBAQBAhISAzACLAoN
CgUEAQISBBIEMAIvKgoMCgUEAQISBhIDMAIVCgwKBQQBAhIBEgMwFiYKDAoF
BAECEgMSAzApKwoLCgQEAQITEgMxAiwKDQoFBAECEwQSBDECMCwKDAoFBAEC
EwYSAzECFQoMCgUEAQITARIDMRYmCgwKBQQBAhMDEgMxKSsKCwoEBAECFBID
MgIsCg0KBQQBAhQEEgQyAjEsCgwKBQQBAhQGEgMyAhUKDAoFBAECFAESAzIW
JgoMCgUEAQIUAxIDMikrCgsKBAQBAhUSAzQCKgoNCgUEAQIVBBIENAIyLAoM
CgUEAQIVBhIDNAIUCgwKBQQBAhUBEgM0FSQKDAoFBAECFQMSAzQnKQoLCgQE
AQIWEgM1AioKDQoFBAECFgQSBDUCNCoKDAoFBAECFgYSAzUCFAoMCgUEAQIW
ARIDNRUkCgwKBQQBAhYDEgM1JykKCwoEBAECFxIDNgIoCg0KBQQBAhcEEgQ2
AjUqCgwKBQQBAhcGEgM2AhMKDAoFBAECFwESAzYUIgoMCgUEAQIXAxIDNiUn
CgsKBAQBAhgSAzcCKAoNCgUEAQIYBBIENwI2KAoMCgUEAQIYBhIDNwITCgwK
BQQBAhgBEgM3FCIKDAoFBAECGAMSAzclJwoLCgQEAQIZEgM4AioKDQoFBAEC
GQQSBDgCNygKDAoFBAECGQYSAzgCFAoMCgUEAQIZARIDOBUkCgwKBQQBAhkD
EgM4JykKCwoEBAECGhIDOQIqCg0KBQQBAhoEEgQ5AjgqCgwKBQQBAhoGEgM5
AhQKDAoFBAECGgESAzkVJAoMCgUEAQIaAxIDOScpCgsKBAQBAhsSAzoCKgoN
CgUEAQIbBBIEOgI5KgoMCgUEAQIbBhIDOgIUCgwKBQQBAhsBEgM6FSQKDAoF
BAECGwMSAzonKQoLCgQEAQIcEgM8AiwKDQoFBAECHAQSBDwCOioKDAoFBAEC
HAYSAzwCFQoMCgUEAQIcARIDPBYmCgwKBQQBAhwDEgM8KSsKCwoEBAECHRID
PQIsCg0KBQQBAh0EEgQ9AjwsCgwKBQQBAh0GEgM9AhUKDAoFBAECHQESAz0W
JgoMCgUEAQIdAxIDPSkrCgsKBAQBAh4SAz4CKgoNCgUEAQIeBBIEPgI9LAoM
CgUEAQIeBhIDPgIUCgwKBQQBAh4BEgM+FSQKDAoFBAECHgMSAz4nKQoLCgQE
AQIfEgM/AioKDQoFBAECHwQSBD8CPioKDAoFBAECHwYSAz8CFAoMCgUEAQIf
ARIDPxUkCgwKBQQBAh8DEgM/JykKCwoEBAECIBIDQAIsCg0KBQQBAiAEEgRA
Aj8qCgwKBQQBAiAGEgNAAhUKDAoFBAECIAESA0AWJgoMCgUEAQIgAxIDQCkr
CgsKBAQBAiESA0ECLAoNCgUEAQIhBBIEQQJALAoMCgUEAQIhBhIDQQIVCgwK
BQQBAiEBEgNBFiYKDAoFBAECIQMSA0EpKwoLCgQEAQIiEgNCAiwKDQoFBAEC
IgQSBEICQSwKDAoFBAECIgYSA0ICFQoMCgUEAQIiARIDQhYmCgwKBQQBAiID
EgNCKSs=
